// File   : shidoku.singular
// Author : Sandeep Koranne 
// Purpose: Soln of 4x4 Shidoku puzzle.

// Shidoku puzzle solution
ring R=0,(x(11),x(12),x(13),x(14),
	  x(21),x(22),x(23),x(24),
          x(31),x(32),x(33),x(34),
          x(41),x(42),x(43),x(44)),lp;
poly f(14) = x(14)-3;
poly f(21) = x(21)-3; poly f(23) = x(23)-1;
poly f(32) = x(32)-4; poly f(34) = x(34)-2;
poly f(41) = x(41)-2;

// Now generate the assignment equations for the rest
poly f(11) = (x(11)-1)*(x(11)-2)*(x(11)-3)*(x(11)-4);
poly f(12) = (x(12)-1)*(x(12)-2)*(x(12)-3)*(x(12)-4);
poly f(13) = (x(13)-1)*(x(13)-2)*(x(13)-3)*(x(13)-4);

poly f(22) = (x(22)-1)*(x(22)-2)*(x(22)-3)*(x(22)-4);
poly f(24) = (x(24)-1)*(x(24)-2)*(x(24)-3)*(x(24)-4);

poly f(31) = (x(31)-1)*(x(31)-2)*(x(31)-3)*(x(31)-4);
poly f(33) = (x(33)-1)*(x(33)-2)*(x(33)-3)*(x(33)-4);

poly f(42) = (x(42)-1)*(x(42)-2)*(x(42)-3)*(x(42)-4);
poly f(43) = (x(43)-1)*(x(43)-2)*(x(43)-3)*(x(43)-4);
poly f(44) = (x(44)-1)*(x(44)-2)*(x(44)-3)*(x(44)-4);

// Row/Column constraints
proc create_poly( int row, int col, int count )
{
  int i = 0;
  int j = 0;
  int loop=0;
  poly f = 0;
  list ans;
  while( i <= count ) {
    print("Creating element for ");
    print(i);
    f=0;
    loop=0;
    j=i;
    while( loop <= i ) {
      if(j%2) { f = f+x^(loop); }
      j=j div 2;
      loop++;
    }
    print("f so far...");
    print(f);
    ans = insert( ans,f );
    i++;
  }
  return (ans);
};


poly fr(1) = x(11)+x(12)+x(13)+x(14)-10;
poly fr(2) = x(21)+x(22)+x(23)+x(24)-10;
poly fr(3) = x(31)+x(32)+x(33)+x(34)-10;
poly fr(4) = x(41)+x(42)+x(43)+x(44)-10;

// Column constraints
poly fc(1) = x(11)+x(21)+x(31)+x(41)-10;
poly fc(2) = x(12)+x(22)+x(32)+x(42)-10;
poly fc(3) = x(13)+x(23)+x(33)+x(43)-10;
poly fc(4) = x(14)+x(24)+x(34)+x(44)-10;

// Subgrid constraints
poly sq(1) = x(11)+x(12)+x(21)+x(22)-10;
poly sq(2) = x(13)+x(14)+x(23)+x(24)-10;
poly sq(3) = x(31)+x(32)+x(41)+x(42)-10;
poly sq(4) = x(33)+x(34)+x(43)+x(44)-10;

// Unique product constaint
poly fmr(1) = x(11)*x(12)*x(13)*x(14)-24;
poly fmr(2) = x(21)*x(22)*x(23)*x(24)-24;
poly fmr(3) = x(31)*x(32)*x(33)*x(34)-24;
poly fmr(4) = x(41)*x(42)*x(43)*x(44)-24;

// Column constraints
poly fmc(1) = x(11)*x(21)*x(31)*x(41)-24;
poly fmc(2) = x(12)*x(22)*x(32)*x(42)-24;
poly fmc(3) = x(13)*x(23)*x(33)*x(43)-24;
poly fmc(4) = x(14)*x(24)*x(34)*x(44)-24;

// Subgrid constraints
poly smq(1) = x(11)*x(12)*x(21)*x(22)-24;
poly smq(2) = x(13)*x(14)*x(23)*x(24)-24;
poly smq(3) = x(31)*x(32)*x(41)*x(42)-24;
poly smq(4) = x(33)*x(34)*x(43)*x(44)-24;

// x(44)=1
poly f(441) = x(44)-1;
// 2nd stage
poly f(431) = x(43)-4;
poly f(421) = x(42)-3;
poly f(121) = x(12)-1;
poly f(241) = x(24)-4;

ideal I=(f(14),f(21),f(23),f(32),f(34),f(41),
         f(11),f(12),f(13),f(22),f(24),
	 f(31),f(33),f(42),f(43),f(44),
	 fr(1),fr(2),fr(3),fr(4),
	 fc(1),fc(2),fc(3),fc(4),	 
	 sq(1),sq(2),sq(3),sq(4),
	 fmr(1),fmr(2),fmr(3),fmr(4),
	 fmc(1),fmc(2),fmc(3),fmc(4),	 
	 smq(1),smq(2),smq(3),smq(4),
	 f(441), f(431),f(421),f(121),
	 f(241)
);

I = std(I);



